{"version":3,"sources":["actions/locationActions.js","actions/types.js","helpers/tempConverter.js","helpers/pressureConverter.js","components/Spinner.js","components/About.js","components/Hours.js","components/Days.js","components/NotFound.js","components/Alert.js","components/Location.js","components/City.js","components/layout/Navbar.js","components/layout/Footer.js","actions/weatherActions.js","components/Dashboard.js","App.js","serviceWorker.js","reducers/weatherReducer.js","reducers/locationReducer.js","reducers/index.js","store.js","index.js"],"names":["apiKey","getCity","city","_ref2","Object","asyncToGenerator","regenerator_default","a","mark","_callee2","dispatch","res","wrap","_context2","prev","next","axios","get","concat","sent","type","payload","data","stop","_x2","apply","this","arguments","tempConverter","temp","Math","round","pressureConverter","pressure","mmHg","Spinner","react_default","createElement","className","role","About","props","match","params","location","name","country","humidity","list","main","dt_txt","icon","weather","description","wind","src","alt","speed","react_router_dom","to","Component","connect","state","Hours","Days","getFiveDaysWeatherDates","dates","map","element","dt","Date","parse","getDate","getDays","arr","_this","dt_txt_current","resultArray","forEach","push","pop","filterByDate","console","log","key","style","background","NotFound","Alert","showAlert","_this2","onClick","setState","data-dismiss","Location","setLocationFromInput","setLocation","locationInput","value","cities","length","disableCityInput","disableInput","ReactDOM","findDOMNode","disabled","Alert_Alert","ref","input","id","placeholder","getCityInfo","_ref","_callee","_context","_x","City","Navbar","href","Footer","Dashboard","components_City","components_Location","getWeather","App","react_router","exact","path","component","Boolean","window","hostname","initialState","combineReducers","undefined","action","objectSpread","toConsumableArray","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b13b18c8.chunk.js","sourcesContent":["import { SET_LOCATION, GET_CITY, DISABLE_CITY_INPUT } from \"./types\";\nimport axios from \"axios\";\n\n// const apiKey = \"e3e797fbded50fc538e05975b37532a2\";\nconst apiKey = \"5aaae38caa80db1a92ab821d250efed7\";\n\nexport const setLocation = city => async dispatch => {\n  const res = await axios.get(\n    `http://api.openweathermap.org/data/2.5/forecast?q=${city}&APPID=${apiKey}`\n  );\n  dispatch({\n    type: SET_LOCATION,\n    payload: res.data\n  });\n};\n\nexport const getCity = city => async dispatch => {\n  const res = await axios.get(\n    `http://api.openweathermap.org/data/2.5/forecast?q=${city}&APPID=${apiKey}`\n  );\n  dispatch({\n    type: GET_CITY,\n    payload: res.data\n  });\n};\n\nexport const disableCityInput = () => {\n  return {\n    type: DISABLE_CITY_INPUT,\n    payload: false\n  };\n};\n","export const GET_WEATHER = \"GET_WEATHER\";\nexport const GET_CITY = \"GET_CITY\";\n\nexport const SET_LOCATION = \"SET_LOCATION\";\nexport const DISABLE_CITY_INPUT = \"DISABLE_CITY_INPUT\";\n","export default function tempConverter(temp) {\n  const KELVIN = 273;\n  return Math.round(temp - KELVIN);\n}\n","export default function pressureConverter(pressure) {\n  const pascal = pressure / 0.01; // hPa\n  const mmHg = pascal * 0.00750062; // to mm Hg\n  return Math.round(mmHg);\n}\n","import React from \"react\";\n\nexport default function Spinner() {\n  return (\n    <div className=\"container mt-5\">\n      <div className=\"row mt-5\">\n        <div className=\"col text-center mt-5\">\n          <div className=\"spinner-border\" role=\"status\">\n            <span className=\"sr-only\">Loading...</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React, { Component } from \"react\";\nimport { getCity } from \"../actions/locationActions\";\nimport tempConverter from \"../helpers/tempConverter\";\nimport pressureConverter from \"../helpers/pressureConverter\";\nimport Spinner from \"./Spinner\";\nimport { Link } from \"react-router-dom\";\n\nimport { connect } from \"react-redux\";\n\nclass About extends Component {\n  componentDidMount() {\n    const { city } = this.props.match.params;\n    this.props.getCity(city);\n  }\n\n  render() {\n    if (this.props.location.city) {\n      let { name } = this.props.location.city;\n      let { country } = this.props.location.city;\n      let { humidity } = this.props.location.list[0].main;\n      let { dt_txt } = this.props.location.list[0];\n      let { temp } = this.props.location.list[0].main;\n      let { pressure } = this.props.location.list[0].main;\n      let { icon } = this.props.location.list[0].weather[0];\n      let { description } = this.props.location.list[0].weather[0];\n      let { wind } = this.props.location.list[0];\n\n      return (\n        <div className=\"row mt-3\">\n          <div className=\"col-md-8 m-auto text-center\">\n            <h4 className=\"card-title\">Weather today</h4>\n            <div className=\"row\">\n              <div className=\"col\">\n                <h2>\n                  {name}, {country}\n                </h2>\n                <p>Current weather {dt_txt}</p>\n              </div>\n            </div>\n            <div className=\"row\">\n              <div className=\"col\">\n                <img\n                  src={`http://openweathermap.org/img/w/${icon}.png`}\n                  alt=\"weather_icon\"\n                />\n                <div className=\"col\">{description}</div>\n              </div>\n            </div>\n            <div className=\"row \">\n              <div className=\"col mt-3 mb-2\">\n                <p>{tempConverter(temp)} &#8451;</p>\n              </div>\n              <div className=\"col mt-3 mb-2\">Wind {wind.speed} m/sec</div>\n              <div className=\"col mt-3 mb-2\">Humidity {humidity} %</div>\n              <div className=\"col mt-3 mb-2\">\n                Pressure {pressureConverter(pressure)} mmHg\n              </div>\n            </div>\n\n            <div className=\"col mt-5\">\n              <Link to={`/days/${name}`} className=\"btn btn-primary ml-1\">\n                5 days forecast\n              </Link>\n              <Link to=\"/\" className=\"btn btn-info ml-1\">\n                <i className=\"fa fa-home\" /> Back Home\n              </Link>\n            </div>\n          </div>\n        </div>\n      );\n    } else {\n      return <Spinner />;\n    }\n  }\n}\n\nconst mapStateToProps = state => ({\n  location: state.location.city\n});\n\nexport default connect(\n  mapStateToProps,\n  { getCity }\n)(About);\n","import React, { Component } from \"react\";\n\nexport default class Hours extends Component {\n  render() {\n    return (\n      <div>\n        <h1>Hours</h1>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { getCity } from \"../actions/locationActions\";\nimport tempConverter from \"../helpers/tempConverter\";\nimport Spinner from \"./Spinner\";\nimport { Link } from \"react-router-dom\";\n\nimport { connect } from \"react-redux\";\n\nclass Days extends Component {\n  componentDidMount() {\n    const { city } = this.props.match.params;\n    this.props.getCity(city);\n  }\n\n  getFiveDaysWeatherDates = dates => {\n    return dates.map(element => {\n      return {\n        dt: element.dt,\n        main: element.main,\n        weather: element.weather,\n        wind: element.wind,\n        dt_txt: (() => {\n          return new Date(Date.parse(element.dt_txt)).getDate();\n        })()\n      };\n    });\n  };\n\n  getDays = dates => {\n    let arr = this.getFiveDaysWeatherDates(dates);\n    let dt_txt_current = 0;\n    let resultArray = [];\n\n    arr.forEach(element => {\n      if (dt_txt_current !== element.dt_txt) {\n        resultArray.push(element);\n        dt_txt_current = element.dt_txt;\n      }\n    });\n    resultArray.pop();\n    return resultArray;\n  };\n\n  render() {\n    let dates = this.props.location.list;\n    let filterByDate = this.getDays(dates);\n    console.log(\"Dates\", dates);\n\n    if (this.props.location) {\n      let { name } = this.props.location.city;\n      let { temp } = this.props.location.list[0].main;\n\n      return (\n        <div>\n          <div className=\"row mt-3\">\n            <div className=\"col-md-8 m-auto text-center\">\n              <h4 className=\"card-title\">{name} 5 day forecast</h4>\n              <div className=\"row\">\n                <div className=\"col\" />\n              </div>\n              <div className=\"row \">\n                <div className=\"col mt-3 mb-2\" />\n                <div className=\"col mt-3 mb-2\" />\n              </div>\n\n              <div className=\"col mt-1\">\n                <Link to={`/about/${name}`} className=\"btn btn-success ml-1\">\n                  Back\n                </Link>\n                <Link to=\"/\" className=\"btn btn-info ml-1\">\n                  <i className=\"fa fa-home\" /> Back Home\n                </Link>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"row\">\n            <div className=\"container\">\n              <div className=\"row mt-3 justify-content-center\">\n                {filterByDate.map(city => {\n                  return (\n                    <div>\n                      <div className=\"col\" key={city.dt}>\n                        <div className=\"row\">\n                          <div className=\"col\">\n                            <h2>Date {city.dt_txt}</h2>\n                            <h2>{city.weather[0].description}</h2>\n                            <img\n                              src={`http://openweathermap.org/img/w/${\n                                city.weather[0].icon\n                              }.png`}\n                              alt=\"weather_icon\"\n                            />\n                          </div>\n                        </div>\n                        <div className=\"row\">\n                          <div className=\"col\">{}</div>\n                        </div>\n\n                        <div className=\"row\">\n                          <div className=\"col mt-2\">\n                            <h3>{tempConverter(temp)} &#8451;</h3>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n          </div>\n        </div>\n      );\n    } else {\n      return <Spinner />;\n    }\n  }\n}\n\nconst mapStateToProps = state => ({\n  location: state.location.city\n});\n\nexport default connect(\n  mapStateToProps,\n  { getCity }\n)(Days);\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nlet style = {\n  background: \"gray\"\n};\n\nexport default function NotFound() {\n  return (\n    <div className=\"container\">\n      <div className=\"row \">\n        <div className=\"col\">\n          <div style={style}>\n            <h1 className=\"ml-5 mt-5 pt-5\">Page not found</h1>\n\n            <div className=\"ml-5 mb-5 pb-5\">\n              <Link to=\"/\" className=\"btn btn-success\">\n                Back Home\n              </Link>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React, { Component } from \"react\";\n\nexport default class Alert extends Component {\n\n  state = {\n    showAlert: true\n  };\n\n  render() {\n    const { showAlert } = this.state;\n    return (\n      <div>\n        {showAlert && (\n          <div className=\"alert alert-warning alert-dismissible\">\n            <button\n              onClick={() =>\n                this.setState({\n                  showAlert: false\n                })\n              }\n              type=\"button\" className=\"close\" data-dismiss=\"alert\">\n              &times;\n            </button>\n            <strong>Warning!</strong> Limit 5 cities input!\n        </div>\n        )}\n      </div>\n\n\n    );\n  }\n}\n\n// $(\".alert\").alert();\n","import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport {\n  setLocation,\n  getCity,\n  disableCityInput\n} from \"../actions/locationActions\";\nimport tempConverter from \"../helpers/tempConverter\";\nimport Alert from \"./Alert\";\nimport { Link } from \"react-router-dom\";\n\nimport { connect } from \"react-redux\";\n\nclass Location extends Component {\n  setLocationFromInput = () => {\n    this.props.setLocation(this.locationInput.value);\n    this.locationInput.value = \"\"\n    if (this.props.location.cities.length === 4) {\n      this.props.disableCityInput();\n    }\n    if ((this.props.location.cities.length === 4) || (this.props.location.disableInput === true)) {\n      let elementInput = ReactDOM.findDOMNode(this.locationInput);\n      return elementInput.disabled = true;\n    }\n\n  };\n\n\n  render() {\n    let cities = this.props.location.cities;\n    let disableInput = this.props.location.disableInput;\n\n    return (\n      <div>\n        <div className=\"row\">\n          <div className=\"col-md-6 m-auto text-center\">\n            <p className=\"mt-5\">Enter City</p>\n            {/* Alert */}\n            <div className=\"row\">\n              <div className=\"col\">{disableInput && <Alert />}</div>\n            </div>\n            {/* Alert */}\n            <input\n              ref={input => {\n                this.locationInput = input;\n              }}\n              type=\"text\"\n              className=\"inputLocation placeholder\"\n              name=\"\"\n              id=\"\"\n              placeholder=\"\"\n            />\n            <button\n              className=\"btn btn-light\"\n              onClick={this.setLocationFromInput}\n            >\n              <i className=\"fas fa-search\" />\n            </button>\n          </div>\n        </div>\n        <div className=\"row mt-5\">\n          {this.props.location.cities.length > 0 ? (\n            <div className=\"col text-center\">\n              <h4>Recent Places</h4>\n            </div>\n          ) : null}\n        </div>\n        <div className=\"container\">\n          <div className=\"row mt-3 justify-content-center\">\n            {cities.map(city => {\n              this.getCityInfo = () => {\n                this.props.getCity(city.city.name);\n              };\n              return (\n                <Link\n                  key={city.city.name}\n                  to={`/about/${city.city.name}`}\n                  onClick={this.getCityInfo}\n                  className=\"btn btn-info m-auto mb-2\"\n                >\n                  <div className=\"col\" key={city.city.name}>\n                    <div className=\"row\">\n                      <div className=\"col\">\n                        <h2>{city.city.name}</h2>\n                        <img\n                          src={`http://openweathermap.org/img/w/${\n                            city.list[0].weather[0].icon\n                            }.png`}\n                          alt=\"weather_icon\"\n                        />\n                      </div>\n                    </div>\n                    <div className=\"row\">\n                      <div className=\"col\">\n                        {city.list[0].weather[0].description}\n                      </div>\n                    </div>\n\n                    <div className=\"row\">\n                      <div className=\"col mt-2\">\n                        <h3>\n                          {tempConverter(city.list[0].main.temp)} &#8451;\n                          </h3>\n                      </div>\n                    </div>\n                  </div>\n                </Link>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nlet mapStateToProps = state => ({\n  location: state.location\n});\n\nexport default connect(\n  mapStateToProps,\n  { setLocation, getCity, disableCityInput }\n)(Location);\n","import React, { Component } from \"react\";\nimport { getCity } from \"../actions/locationActions\";\nimport tempConverter from \"../helpers/tempConverter\";\nimport pressureConverter from \"../helpers/pressureConverter\";\nimport Spinner from \"./Spinner\";\n\nimport { Link } from \"react-router-dom\";\n\nimport { connect } from \"react-redux\";\n\nclass City extends Component {\n  getCityInfo = () => {\n    let city = this.props.location.city.name;\n    this.props.getCity(city);\n  };\n\n  render() {\n    if (this.props.location) {\n      let { city } = this.props.location;\n      let { temp } = this.props.location.list[0].main;\n      let { pressure } = this.props.location.list[0].main;\n      let { icon } = this.props.location.list[0].weather[0];\n      let { description } = this.props.location.list[0].weather[0];\n      let { wind } = this.props.location.list[0];\n      return (\n        <div className=\"row mt-3\">\n          <div className=\"col-md-8 m-auto text-center\">\n            <h4 className=\"card-title\">Weather today</h4>\n            <div className=\"row\">\n              <div className=\"col\">\n                <h2>{city.name}</h2>\n              </div>\n            </div>\n            <div className=\"row\">\n              <div className=\"col\">\n                <img\n                  src={`http://openweathermap.org/img/w/${icon}.png`}\n                  alt=\"weather_icon\"\n                />\n                <div className=\"col\">{description}</div>\n              </div>\n            </div>\n            <div className=\"row \">\n              <div className=\"col mt-3 mb-2\"><h3>{tempConverter(temp)} &#8451;</h3></div>\n              <div className=\"col mt-3 mb-2\">Wind {wind.speed} m/sec</div>\n              <div className=\"col mt-3 mb-2\">\n                Pressure {pressureConverter(pressure)} mmHg\n              </div>\n            </div>\n\n            <div className=\"col mt-1\">\n              <Link\n                to={`/about/${city.name}`}\n                onClick={this.getCityInfo}\n                className=\"btn btn-info ml-1\"\n              >\n                Details\n              </Link>\n            </div>\n          </div>\n        </div>\n      );\n    } else {\n      return <Spinner />;\n    }\n  }\n}\n\nconst mapStateToProps = state => ({\n  location: state.location.cities[0]\n});\n\nexport default connect(\n  mapStateToProps,\n  { getCity }\n)(City);\n","import React from \"react\";\n\nexport default function Navbar() {\n  return (\n    <nav className=\"navbar navbar-expand-sm bg-dark navbar-dark d-flex justify-content-around\">\n      <p className=\"navbar-brand\">Weather forecast</p>\n      <ul className=\"navbar-nav\">\n        <li className=\"nav-item\">\n          <a\n            className=\"btn btn-link\"\n            href=\"https://github.com/volosgoto/weather_forecast_react\"\n          >\n            <i className=\"fab fa-github fa-lg\" /> GitHub code\n          </a>\n        </li>\n        <li className=\"nav-item\">\n          <a\n            className=\"btn btn-link\"\n            href=\"http://personal.infokus.org.ua/contact\"\n          >\n            Author\n          </a>\n        </li>\n      </ul>\n    </nav>\n  );\n}\n","import React from \"react\";\n\nexport default function Footer() {\n  return (\n    <footer>\n      <nav className=\"navbar bg-dark navbar-dark d-flex justify-content-center fixed-bottom\">\n        <ul className=\"navbar-nav\">\n          <li className=\"nav-item\">\n            {/* Weather forecast designed for Tanya Melnyk */}\n            Weather forecast designed\n          </li>\n        </ul>\n      </nav>\n    </footer>\n  );\n}\n","import { GET_WEATHER } from \"./types\";\nimport axios from \"axios\";\n\n// const apiKey = \"e3e797fbded50fc538e05975b37532a2\";\nconst apiKey = \"5aaae38caa80db1a92ab821d250efed7\";\nconst defaultLocation = \"kyiv\";\n\nexport const getWeather = (city) => async dispatch => {\n  const location = city || defaultLocation;\n  const res = await axios.get(\n    `http://api.openweathermap.org/data/2.5/forecast?q=${location}&APPID=${apiKey}`\n  );\n  // console.log('res', res);\n  dispatch({\n    type: GET_WEATHER,\n    payload: res.data\n  });\n};\n","import React, { Component } from \"react\";\nimport Location from \"./Location\";\nimport City from \"./City\";\nimport Spinner from \"./Spinner\";\nimport Navbar from \"./layout/Navbar\";\nimport Footer from \"./layout/Footer\";\n\nimport { getWeather } from \"../actions/weatherActions\";\nimport { connect } from \"react-redux\";\n\nclass Dashboard extends Component {\n  render() {\n    let { weather } = this.props;\n    if (weather) {\n      return (\n        <div>\n          <Navbar />\n          <div className=\"container-fluid\">\n            {/* <Test /> */}\n            <City />\n            <Location weather={weather} />\n          </div>\n          <Footer />\n        </div>\n      );\n    } else {\n      return <Spinner />;\n    }\n  }\n}\n\nconst mapStateToProps = state => ({\n  weather: state.weather\n});\n\nexport default connect(\n  mapStateToProps,\n  { getWeather }\n)(Dashboard);\n","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport About from \"./components/About\";\nimport Hours from \"./components/Hours\";\nimport Days from \"./components/Days\";\n\nimport NotFound from \"./components/NotFound\";\n\nimport Dashboard from \"./components/Dashboard\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <Switch>\n          <Route\n            exact\n            path=\"https://volosgoto.github.io/weather_forecast_react/\"\n            component={Dashboard}\n          />\n          <Route exact path=\"/about/:city\" component={About} />\n          <Route exact path=\"/hours/:city\" component={Hours} />\n          <Route exact path=\"/days/:city\" component={Days} />\n          <Route component={NotFound} />\n        </Switch>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { GET_WEATHER } from \"../actions/types\";\n\nlet initialState = {};\n\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case GET_WEATHER:\n      return {\n        ...state,\n        weather: action.payload\n      };\n    default:\n      return state;\n  }\n}\n","import { SET_LOCATION, GET_CITY, DISABLE_CITY_INPUT } from \"../actions/types\";\n\nlet initialState = {\n  cities: [],\n  city: [],\n};\n\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case SET_LOCATION:\n      return {\n        ...state,\n        cities: (() => {\n          return [action.payload, ...state.cities].length < 6\n            ? [action.payload, ...state.cities]\n            : state.cities;\n        })()\n      };\n    case GET_CITY:\n      return {\n        ...state,\n        city: action.payload\n      };\n    case DISABLE_CITY_INPUT:\n      return {\n        ...state,\n        disableInput: !action.payload\n      };\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from \"redux\";\nimport weatherReducer from \"./weatherReducer\";\nimport locationReducer from \"./locationReducer\";\n\nexport default combineReducers({\n  weather: weatherReducer,\n  location: locationReducer\n});\n","import { createStore, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./reducers\";\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst store = createStore(\n  rootReducer,\n  initialState,\n  compose(\n    applyMiddleware(...middleware)\n    // window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n  )\n);\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./styles/style.css\";\n\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}